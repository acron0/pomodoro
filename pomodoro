#!/usr/bin/env zsh

# Here how it is intended to work
# When you start the script, it asks you the name of the task
# Then you work for 25 min.
# Once finished you are notified it is time to take a break (5 min).
# After 4 work sessions, you take a longer break (30 min).
# Each work session require you enter a name.
# At the end of the day, all your tasks are keep into ~/Documents/Pomodoro

POMODORO_NO_LOGS=0
POMODORO_LOG_DIRECTORY="$HOME/Documents/Pomodoro"
# if you add a TODO.txt file in $POMODORO_LOG_DIRECTORY
# The list of TODO is presented for shortcut
POMODORO_TODO_FILE="$POMODORO_LOG_DIRECTORY/TODO.txt"
POMODORO_CURRENT_TIME_FILE="$POMODORO_LOG_DIRECTORY/.CURRENT-TIME"
POMODORO_CURRENT_STATE_FILE="$POMODORO_LOG_DIRECTORY/.CURRENT-STATE"
POMODORO_CURRENT_PID="$POMODORO_LOG_DIRECTORY/.CURRENT-PID"

#
POMODORO_FILENAME_FORMAT="%Y-week-%V.txt"

#
POMODORO_NUM_LATEST_TASKS=5

# times are in minutes
POMODORO_WORKING_TIME=25
POMODORO_SHORT_RELAX_TIME=5
POMODORO_LONG_RELAX_TIME=15
# you can install get-shit-done at
# http://github.com/yogsototh/get-shit-done.git
# If you want to block some popular website
# during your work session.
# note you can overide these functions in $HOME/.pomodoro

POMODORO_WANTS_NEXT_STATE=

function exit_please {
    echo "\nExiting..."
    if [ -f $POMODORO_CURRENT_PID ]; then
        rm $POMODORO_CURRENT_PID
    fi
    exit 0
}

has(){
    which $1 >/dev/null 2>&1
}
write_state() {
    echo $1 > $POMODORO_CURRENT_STATE_FILE
}
focus_on() {
    has get-shit-done && {
        sudo =get-shit-done work
        print -- "[focus on]"
    }
}
focus_off() {
    has get-shit-done && {
        sudo =get-shit-done play
        print -- "[focus off]"
    }
}

pomodoro_work_started() { focus_on; write_state "work" }
pomodoro_work_time_ended() { write_state "over-working" }
pomodoro_pause_started() { focus_off; write_state "relax" }
pomodoro_pause_time_ended() { focus_on; write_state "slacking"  }

# used to list latests task names
typeset -U latestTasks
typeset -U todoTasks

showConfMessage() {
    print -- "You can use the \$HOME/.pomodoro file to declare your own notification system"
    print -- "For example you could add: "
    print -- "POMODORO_NOTIFY=\"notify_cmd --message=%m\""
    print
    print -- "Then notification will be executed as \"notify_cmd\" --message=\"notification message\""
}

# A nofity function as portable as possible
notify() {
    local message="$*"

    print -n -- "$message"
    if [[ "$POMODORO_NOTIFY" != "" ]]; then
        eval $( echo $POMODORO_NOTIFY | sed 's/%m/"'$message'"/g' )
        return
    fi
    case $(uname) in
        Darwin) # On Mac
                if has terminal-notifier; then
                    # you could install terminal-notifier from brew
                    terminal-notifier -message "$message" -title "pomodoro"
                fi
                if has growlnotify; then
                    growlnotify -m "[Pomodoro] $message"
                fi
                ;;
        Linux) # on Ubuntu => sudo apt-get install libnotify-bin
               # on other systems libnotify
               local DELAY=5 # in seconds
               local ICON=/usr/share/icons/Tango/32x32/actions/appointment.png
               if has notify-send; then
                notify-send \
                   --urgency=critical \
                   --expire-time=$(( DELAY * 1000 )) \
                   --icon=$ICON "[Pomodoro] " $message
               fi
               ;;
        *) {
            print -- "I didn't made any notification for your system"
            showConfMessage
            } >&2
    esac
}

# show timer take two arguments
# time and a message
# after time is expired the message is send to notification system
# And the counter grow.
function timer() {
    local timeToWait=$1
    local message="$2"
    local triggerCmd="$3"
    if pretimer $timeToWait; then
        eval $triggerCmd
        posttimer $message
    fi
}

# Show a timer, stop if you hit Return
function pretimer() {
    local m=$1
    local s=00
    local rem=""
    local firsttime=1
    while (( m+s > 0 )); do
        ((s--))
        if ((s<0)); then
            ((s=59))
            ((m--))
        fi
        TIME=$(printf "%02d:%02d" $m $s)
        printf "$rem$TIME"
        echo $TIME > $POMODORO_CURRENT_TIME_FILE
        # printf "$rem%02d:%02d" $m $s
        (( $firsttime )) && {
            rem="\b\b\b\b\b"
            firsttime=0
        }
        [[ "$POMODORO_WANTS_NEXT_STATE" == "1" ]] || read -t 1 && {
                if [[ "$POMODORO_WANTS_NEXT_STATE" == "1" ]]; then
                    print
                    POMODORO_WANTS_NEXT_STATE=
                fi
                return 1
            }
    done
    print
    return 0
}

# Show a growing counter, stop if you hit Return
funtion posttimer() {
    local m=00
    local s=00
    local rem=""
    local firsttime=1
    local message="$*"
    notify "$message"
    while : ; do
        ((s++))
        if ((s>59)); then
            ((s=0))
            ((m++))
            notify "\r$message      "
        fi
        TIME=$(printf "+%02d:%02d" $m $s)
        printf "$rem$TIME"
        echo $TIME > $POMODORO_CURRENT_TIME_FILE
        (( $firsttime )) && {
            rem="\b\b\b\b\b\b"
            firsttime=0
        }
        [[ "$POMODORO_WANTS_NEXT_STATE" == "1" ]] || read -t 1 && break
    done
    if [[ "$POMODORO_WANTS_NEXT_STATE" == "1" ]]; then
        print
        POMODORO_WANTS_NEXT_STATE=
    fi
}

# If you had done some task this week
# We help you find these
function initLatestTasksFromLogFile() {
    if [[ ! -r $logfile ]]; then
        [[ ! -r $lastweeklogfile ]] && return
        latestlogfile="$lastweeklogfile"
    else
        latestlogfile="$logfile"
    fi
    local cmd="latestTasks=( $( tail -n $POMODORO_NUM_LATEST_TASKS $latestlogfile | awk '{printf "\""; gsub(/"/,"\\\""); gsub(/%/,"°/o"); for (i=6;i<=NF;i++) printf $i" "; print "\""}' ) )"
    eval $cmd
}

function initTodoTasksFromFile() {
    [[ ! -r $POMODORO_TODO_FILE ]] && return
    local cmd="todoTasks=( $(< $POMODORO_TODO_FILE | egrep -v '%(wait|done)' | awk '{printf "\""; gsub(/"/,"\\\""); gsub(/%/,"°/o"); printf $0; print "\""; }') )"
    eval $cmd
}

# Which file to track your activity?
function initialize() {
    # nb is the number of loop we already done
    nb=1
    # read the .pomodoro file if it exists
    [[ -e $HOME/.pomodoro ]] && source $HOME/.pomodoro

    if ((POMODORO_NO_LOGS)); then
        logfile=/dev/null
    else
        # Verify where to write podomoro logs
        logfiledir="$POMODORO_LOG_DIRECTORY"
        logfilename=$(date +$POMODORO_FILENAME_FORMAT)

        case $(uname) in
            Linux) lastweeklogfile=$(date -d 'last week' +$POMODORO_FILENAME_FORMAT);;
            *) lastweeklogfile=$(date -v-7d +$POMODORO_FILENAME_FORMAT);;
        esac
        logfile=$logfiledir/$logfilename

        while [[ ! -d $logfiledir ]]; do
            print -- "$logfiledir does not exists. Would you want to create it? (y/n)"
            read answer
            case $answer in
                Y|YES|y|yes) mkdir -p $logfiledir || exit 1;;
                *) print -- "Enter a full path of directory to write logs or just enter NO to don't keep tasks."
                    read answer
                    case $answer in
                        N|n|NO|no) logfiledir=/dev; logfile=/dev/null
                        ;;
                        *)  logfiledir=$answer;
                            NO_LOGS=1;
                            logfile=$logfiledir/$logfilename ;;
                    esac
                    {
                        print -- "logfiledir=$logfiledir"
                        (( NO_LOGS )) && print -- "NO_LOGS=1"
                    } > $HOME/.pomodoro
                    ;;
            esac
        done
    fi
    initLatestTasksFromLogFile
    initTodoTasksFromFile
}

# set the task var
function setTask() {
    task=$1
    latestTasks=( $latestTasks "$task" )
}

# ask the title of the tasks
# And present previous tasks and TODO
function askTitle() {
    ((${#latestTasks})) && print -P -- "%Bworked tasks%b"
    local i=1;
    print
    for task in $latestTasks; do
        print -- "$i) $task"
        ((i++))
    done
    (( ${#todoTasks} > 0 )) && print -P -- "%BTODO%b"
    for task in $todoTasks; do
        print -P -- "%B$i) $task%b"
        ((i++))
    done
    local choiceMsg=""
    ((i==2)) && choiceMsg=" (or 1)"
    ((i>2)) && choiceMsg=" (or 1 - $((i-1)))"
    notify "Enter the title of the task${choiceMsg}: "
    read task

    # if the user returned a number
    if print -- $task | grep -e '^[0-9][0-9]*$' >/dev/null; then
        # if the number corresond to a latestTasks
        if (( task <= ${#latestTasks} )); then
            task="${latestTasks[$task]}"
            return
        fi
        # if the number is a todo task number
        task=$(( task - ${#latestTasks} ))
        if (( task <= ${#todoTasks} )); then
            task="${todoTasks[$task]}"
            return
        fi
    fi

    # if it wasn't a valid number add the task to latestTasks
    latestTasks=( $latestTasks "$task" )
}

# first 3 pauses are short ones
# the 4th is a long one
function compute_pause_time() {
    if ((nb++ % 4 == 0)); then
        notify "Long pause "
        POMODORO_RELAX_TIME=$POMODORO_LONG_RELAX_TIME
    else
        notify "Relax "
        POMODORO_RELAX_TIME=$POMODORO_SHORT_RELAX_TIME
    fi
}

function catchUsr1() {
    POMODORO_WANTS_NEXT_STATE=1
}

function listTasks() {
    for task in $latestTasks; do
        echo $task
    done
}

function showTime() {
    if [ -f $POMODORO_CURRENT_TIME_FILE ]; then
        cat $POMODORO_CURRENT_TIME_FILE
    fi
}

function showState() {
    if [ -f $POMODORO_CURRENT_STATE_FILE ]; then
        cat $POMODORO_CURRENT_STATE_FILE
    fi
}

function showStatus() {
    if [ -f $POMODORO_CURRENT_PID ]; then
        s=$(showState);
        t=$(showTime);
        if [[ ! "$s" == "" ]] && [[ ! "$t" == "" ]]; then
            printf "%s %s" $(showState) $(showTime)
        fi
    else
        echo "not running"
    fi
}

function moveToNextState() {
    if [ -f $POMODORO_CURRENT_PID ]; then
        echo "Moving to next state..."
        kill -s USR1 $(cat $POMODORO_CURRENT_PID)
    else
        echo "not running"
    fi
}
# ------------- START -------------

initialize

if [[ "$1" == "list-tasks" ]]; then
    listTasks
    exit 0
fi
if [[ "$1" == "show-time" ]]; then
    showTime
    exit 0
fi
if [[ "$1" == "show-state" ]]; then
    showState
    exit 0
fi
if [[ "$1" == "show-status" ]]; then
    showStatus;
    exit 0
fi
if [[ "$1" == "next" ]]; then
    moveToNextState;
    exit 0
fi

trap exit_please INT
echo "$$" > $POMODORO_CURRENT_PID

trap catchUsr1 SIGUSR1

while (true) {
          # Ask the user the title of the task
          if [[ "$1" == "task" ]] && [[ "$2" != "" ]]; then
              setTask $2
          else
              askTitle
          fi

          # Start working
          startedTime=$(date +"%H:%M")

          # notification isn't needed
          print -n -- "WORK NOW! "

          pomodoro_work_started
          timer $POMODORO_WORKING_TIME "Time for a break." pomodoro_work_time_ended
          # Task finished

          # Write logs
          print "$(date +"%A (%F) $startedTime → %H:%M") $task" >> $logfile

          # Time for a break
          compute_pause_time

          pomodoro_pause_started
          timer $POMODORO_RELAX_TIME "Time to work!" pomodoro_pause_time_ended
      }
